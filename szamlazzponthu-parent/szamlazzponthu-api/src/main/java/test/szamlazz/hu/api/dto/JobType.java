/*
 * Usr API
 * CRUD műveletek a Usr erőforráson.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package test.szamlazz.hu.api.dto;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * JobType
 */
@JsonPropertyOrder({
  JobType.JSON_PROPERTY_CODE,
  JobType.JSON_PROPERTY_LABEL_HU,
  JobType.JSON_PROPERTY_LABEL_EN
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class JobType {
  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_LABEL_HU = "label_hu";
  private String labelHu;

  public static final String JSON_PROPERTY_LABEL_EN = "label_en";
  private String labelEn;

  public JobType() { 
  }

  public JobType code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public JobType labelHu(String labelHu) {
    this.labelHu = labelHu;
    return this;
  }

   /**
   * Get labelHu
   * @return labelHu
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL_HU)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabelHu() {
    return labelHu;
  }


  @JsonProperty(JSON_PROPERTY_LABEL_HU)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabelHu(String labelHu) {
    this.labelHu = labelHu;
  }


  public JobType labelEn(String labelEn) {
    this.labelEn = labelEn;
    return this;
  }

   /**
   * Get labelEn
   * @return labelEn
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL_EN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabelEn() {
    return labelEn;
  }


  @JsonProperty(JSON_PROPERTY_LABEL_EN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabelEn(String labelEn) {
    this.labelEn = labelEn;
  }


  /**
   * Return true if this JobType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobType jobType = (JobType) o;
    return Objects.equals(this.code, jobType.code) &&
        Objects.equals(this.labelHu, jobType.labelHu) &&
        Objects.equals(this.labelEn, jobType.labelEn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, labelHu, labelEn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobType {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    labelHu: ").append(toIndentedString(labelHu)).append("\n");
    sb.append("    labelEn: ").append(toIndentedString(labelEn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `code` to the URL query string
    if (getCode() != null) {
      joiner.add(String.format("%scode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `label_hu` to the URL query string
    if (getLabelHu() != null) {
      joiner.add(String.format("%slabel_hu%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLabelHu()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `label_en` to the URL query string
    if (getLabelEn() != null) {
      joiner.add(String.format("%slabel_en%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLabelEn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

