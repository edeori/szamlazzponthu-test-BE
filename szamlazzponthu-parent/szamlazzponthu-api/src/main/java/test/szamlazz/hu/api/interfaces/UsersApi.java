/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package test.szamlazz.hu.api.interfaces;

import test.szamlazz.hu.api.dto.Error;
import java.net.URI;
import test.szamlazz.hu.api.dto.Usr;
import test.szamlazz.hu.api.dto.UsrCreate;
import test.szamlazz.hu.api.dto.UsrPut;
import test.szamlazz.hu.api.dto.ValidationError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Users", description = "the Users API")
public interface UsersApi {

    /**
     * GET /users : Userek listázása
     *
     * @param limit Visszaadott rekordok száma (optional, default to 50)
     * @param offset Hány rekord kihagyása a lista elejéről (optional, default to 0)
     * @return Sikeres lekérdezés (status code 200)
     *         or Hibás kérés / validációs hiba (status code 400)
     */
    @Operation(
        operationId = "usersGet",
        summary = "Userek listázása",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres lekérdezés", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Usr.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Hibás kérés / validációs hiba", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Usr>> _usersGet(
        @Min(1) @Max(200) @Parameter(name = "limit", description = "Visszaadott rekordok száma", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "50") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Hány rekord kihagyása a lista elejéről", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset
    );


    /**
     * DELETE /users/{id} : User törlése
     *
     * @param id User azonosító (required)
     * @return Törölve (nincs tartalom) (status code 204)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "usersIdDelete",
        summary = "User törlése",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Törölve (nincs tartalom)"),
            @ApiResponse(responseCode = "404", description = "Nem található", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> _usersIdDelete(
        @Min(1L) @Parameter(name = "id", description = "User azonosító", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /users/{id} : User lekérdezése azonosító alapján
     *
     * @param id User azonosító (required)
     * @return OK (status code 200)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "usersIdGet",
        summary = "User lekérdezése azonosító alapján",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Usr.class))
            }),
            @ApiResponse(responseCode = "404", description = "Nem található", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Usr> _usersIdGet(
        @Min(1L) @Parameter(name = "id", description = "User azonosító", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * PUT /users/{id} : User teljes frissítése (replace)
     *
     * @param id User azonosító (required)
     * @param usrPut  (required)
     * @return Frissítve (status code 200)
     *         or Hibás kérés / validációs hiba (status code 400)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "usersIdPut",
        summary = "User teljes frissítése (replace)",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Frissítve", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Usr.class))
            }),
            @ApiResponse(responseCode = "400", description = "Hibás kérés / validációs hiba", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Nem található", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Usr> _usersIdPut(
        @Min(1L) @Parameter(name = "id", description = "User azonosító", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UsrPut", description = "", required = true) @Valid @RequestBody UsrPut usrPut
    );


    /**
     * POST /users : Új user létrehozása
     *
     * @param usrCreate  (required)
     * @return Létrehozva (status code 201)
     *         or Hibás kérés / validációs hiba (status code 400)
     */
    @Operation(
        operationId = "usersPost",
        summary = "Új user létrehozása",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Létrehozva", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Usr.class))
            }),
            @ApiResponse(responseCode = "400", description = "Hibás kérés / validációs hiba", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Usr> _usersPost(
        @Parameter(name = "UsrCreate", description = "", required = true) @Valid @RequestBody UsrCreate usrCreate
    );

}
